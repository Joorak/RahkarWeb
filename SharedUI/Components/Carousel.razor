<div class="carousel-container @(bsClass)" style="width: @Width; height: @Height; direction: @(IsRTL ? "rtl" : "ltr");">
    <div class="carousel-inner">
        @foreach (var item in Items)
        {
            <div class="carousel-item @(item == CurrentItem ? "active" : "")">
                <a href="@item.ClickTarget">
                    <img src="@item.ImageUrl" class="d-block w-100" alt="Carousel Image">
                </a>
                <div class="carousel-caption @(IsRTL ? "text-start" : "text-end")">
                    <div class="caption-content">
                        @((MarkupString)item.Title)
                        @((MarkupString)item.Text)
                        @if (!string.IsNullOrEmpty(item.ButtonText))
                        {
                            <a href="@item.ButtonTarget" class="btn btn-danger mt-2">@((MarkupString)item.ButtonText)</a>
                        }
                    </div>
                </div>
            </div>
        }
        @if (ShowNavigationButtons)
        {
            <button class="carousel-control-prev" @onclick="PreviousItem">
                <i class="bi bi-chevron-right"></i>
            </button>
            <button class="carousel-control-next" @onclick="NextItem">
                <i class="bi bi-chevron-left"></i>
            </button>
        }
    </div>

    

    @if (IsIndicators)
    {
        <div class="carousel-indicators mx-auto">
            @for (int i = 0; i < Items.Count; i++)
            {
                var index = i;
                <button class="@(i == CurrentIndex ? "active" : "")" @onclick="() => GoToItem(index)"></button>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public bool IsRTL { get; set; } = true;

    [Parameter]
    public List<CarouselItem> Items { get; set; } = new List<CarouselItem>();

    [Parameter]
    public bool ShowNavigationButtons { get; set; } = true;

    [Parameter]
    public bool AutoPlay { get; set; } = true;

    [Parameter]
    public bool IsIndicators { get; set; } = true;

    [Parameter]
    public string bsClass { get; set; } = "";

    [Parameter]
    public string Width { get; set; } = "";

    [Parameter]
    public string Height { get; set; } = "";

    [Parameter]
    public EventCallback<CarouselItem> ItemChangeCall { get; set; }

    private CarouselItem CurrentItem => Items.Any() ? Items[CurrentIndex] : null;
    private int CurrentIndex { get; set; } = 0;
    private System.Timers.Timer AutoPlayTimer;

    protected override async Task OnInitializedAsync()
    {
        if (AutoPlay && Items.Any())
        {
            AutoPlayTimer = new System.Timers.Timer(CurrentItem.DisplayDuration);
            AutoPlayTimer.Elapsed += (sender, e) =>  Task.Run(() => NextItem());
            AutoPlayTimer.AutoReset = true;
            await Task.Run(() => AutoPlayTimer.Start());
        }
    }

    private async Task NextItem()
    {
        CurrentIndex = (CurrentIndex + 1) % Items.Count;
        await ItemChangeCall.InvokeAsync(CurrentItem);
        if (AutoPlay)
        {
            AutoPlayTimer.Interval = CurrentItem.DisplayDuration;
            AutoPlayTimer.Start();
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task PreviousItem()
    {
        CurrentIndex = (CurrentIndex - 1 + Items.Count) % Items.Count;
        await ItemChangeCall.InvokeAsync(CurrentItem);
        if (AutoPlay)
        {
            AutoPlayTimer.Interval = CurrentItem.DisplayDuration;
            AutoPlayTimer.Start();
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task GoToItem(int index)
    {
        CurrentIndex = index;
        await ItemChangeCall.InvokeAsync(CurrentItem);
        if (AutoPlay)
        {
            AutoPlayTimer.Interval = CurrentItem.DisplayDuration;
            AutoPlayTimer.Start();
        }
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        AutoPlayTimer?.Dispose();
    }
}