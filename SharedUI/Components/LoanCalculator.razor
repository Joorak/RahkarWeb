@* <link href="css/loan-calculator.css" rel="stylesheet" /> *@

<div class="lc-calculator">
    <h3 class="d-flex mx-auto mb-5">ماشین حساب وام</h3>

    <!-- باکس نرخ سود قابل تغییر -->
    <div class="lc-info-box mt-5">
        <label>نرخ سود (%):</label>
        <input type="number" step="0.2" @bind-Value="@LocalInterestRate" @bind-Value:event="oninput" style="width: 100px;" />
    </div>

    <!-- اسلایدرها -->
    <div class="lc-sliders">
        <div class="lc-slider-row">
            <div class="lc-slider-group">
                <label>مبلغ تسهیلات (تومان):</label>
                <input type="range" min="@MinLoanAmount" max="@MaxLoanAmount" step="@LoanStep" @bind-Value="@LoanAmount" @bind-Value:event="oninput" @onchange="Calculate" />
                <span>@LoanAmount.ToString("N0") تومان</span>
            </div>
            <div class="lc-slider-group">
                <label>تعداد بازپرداخت:</label>
                <input type="range" min="@MinPaymentMonths" max="@MaxPaymentMonths" step="1" @bind-Value="@PaymentMonths" @bind-Value:event="oninput" @onchange="Calculate" />
                <span>@PaymentMonths ماه</span>
            </div>
        </div>
        <div class="lc-slider-row">
            <div class="lc-slider-group">
                <label>تعداد روز تنفس:</label>
                <input type="range" min="0" max="@MaxGraceDays" step="10" @bind-Value="@GraceDays" @bind-Value:event="oninput" @onchange="Calculate" />
                <span>@GraceDays روز</span>
            </div>
            <div class="lc-slider-group">
                <label>فاصله بین دو بازپرداخت (ماه):</label>
                <input type="range" min="1" max="@MaxPaymentInterval" step="1" @bind-Value="@PaymentInterval" @bind-Value:event="oninput" @onchange="Calculate" />
                <span>@PaymentInterval ماه</span>
            </div>
        </div>
    </div>

    <!-- نتایج محاسبات -->
    <div class="container">
        <div class="row my-3">
            <div class="col text-center fs-2">
                نتایج محاسبات
            </div>
        </div>
        <div class="row justify-content-evenly">
            <div class="col-12 col-md-6 text-center">
                <label>مبلغ هر بازپرداخت:</label>
                <span>@(MonthlyPayment.ToString("N0")) تومان</span>
            </div>
            <div class="col-12 col-md-6 text-center">
                <label>مبلغ فرع تسهیلات:</label>
                <span>@(InterestAmount.ToString("N0")) تومان</span>
            </div>
        </div>
    </div>
    @* <div class="lc-results ">
        <h4 class=" fw-bold">نتایج محاسبات</h4>
        <div class="lc-result-row">
            <div class="lc-result-item">
                <label>مبلغ هر بازپرداخت:</label>
                <span>@(MonthlyPayment.ToString("N0")) تومان</span>
            </div>
            <div class="lc-result-item">
                <label>مبلغ فرع تسهیلات:</label>
                <span>@(InterestAmount.ToString("N0")) تومان</span>
            </div>
        </div>
        <div class="lc-result-row">
            <div class="lc-result-item">
                <label>فرع تنفس:</label>
                <span>@(GraceInterestAmount.ToString("N0")) تومان</span>
            </div>
            <div class="lc-result-item">
                <label>مبلغ اصل و فرع:</label>
                <span>@(TotalAmount.ToString("N0")) تومان</span>
            </div>
        </div>
        <div class="lc-result-item">
            <label>@DifferenceTitle:</label>
            <span>@(FeeAmount.ToString("N0")) تومان</span>
        </div>
    </div> *@

    <!-- دکمه و جدول بازپرداخت -->
    <div class="position-relative py-4">
    <button class="lc-toggle-table position-absolute start-50 top-50 translate-middle" @onclick="ToggleTable">@(ShowTable ? "مخفی کردن جدول" : "مشاهده جدول بازپرداخت")</button>
    </div>
    @if (ShowTable)
    {
        <div class="position-relative pt-3">
            <div class="position-absolute start-0 top-100 translate-middle-y"><i class="bi bi-file-excel fw-bold"></i></div>
        </div>
        <div class="lc-table-container" style="height: @(TableHeight)px; overflow: hidden; transition: height 0.5s ease;">
            <table class="lc-payment-table">
                <thead>
                    <tr>
                        <th>شماره بازپرداخت</th>
                        <th>مبلغ بازپرداخت</th>
                        <th>سهم اصل</th>
                        <th>سهم فرع</th>
                        <th>مانده تسهیلات</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var payment in PaginatedPaymentSchedule)
                    {
                        <tr>
                            <td>@payment.InstallmentNumber</td>
                            <td>@payment.PaymentAmount.ToString("N0") تومان</td>
                            <td>@payment.PrincipalShare.ToString("N0") تومان</td>
                            <td>@payment.InterestShare.ToString("N0") تومان</td>
                            <td>@payment.RemainingBalance.ToString("N0") تومان</td>
                        </tr>
                    }
                </tbody>
            </table>
            <div class="lc-pagination">
                <button class="lc-pagination-btn" disabled="@(CurrentPage == 1)" @onclick="PreviousPage">قبلی</button>
                <span>صفحه @CurrentPage از @TotalPages</span>
                <button class="lc-pagination-btn" disabled="@(CurrentPage == TotalPages)" @onclick="NextPage">بعدی</button>
            </div>
            <button class="lc-export-btn" @onclick="ExportToExcel">صدور به اکسل</button>
            <button class="lc-export-btn" @onclick="ExportToPDF">صدور به PDF</button>
        </div>
    }
</div>

@code {
    // پارامترهای ورودی
    [Parameter] public double InterestRate { get; set; } = 0;
    [Parameter] public double RealInterestRate { get; set; } = 0;
    [Parameter] public string DifferenceTitle { get; set; } = "کارمزد خدمات فین تک";
    [Parameter] public long MinLoanAmount { get; set; } = 50000000;
    [Parameter] public long MaxLoanAmount { get; set; } = 1000000000;
    [Parameter] public long LoanStep { get; set; } = 10000000;
    [Parameter] public int MinPaymentMonths { get; set; } = 1;
    [Parameter] public int MaxPaymentMonths { get; set; } = 240;
    [Parameter] public int MaxGraceDays { get; set; } = 30;
    [Parameter] public int MaxPaymentInterval { get; set; } = 3;

    // مقادیر اسلایدرها و نرخ سود
    private long LoanAmount { get; set; } = 50000000;
    private int PaymentMonths { get; set; } = 12;
    private int GraceDays { get; set; } = 0;
    private int PaymentInterval { get; set; } = 1;
    private double _localInterestRate;
    private double LocalInterestRate
    {
        get => _localInterestRate;
        set
        {
            if (_localInterestRate != value)
            {
                _localInterestRate = value;
#pragma warning disable CS4014
                Calculate(); // فراخوانی Calculate هنگام تغییر نرخ سود
#pragma warning restore CS4014
            }
        }
    }

    // نتایج محاسبات
    private double MonthlyPayment { get; set; } = 0;
    private double InterestAmount { get; set; } = 0;
    private double GraceInterestAmount { get; set; } = 0;
    private double TotalAmount { get; set; } = 0;
    private double FeeAmount { get; set; } = 0;
    private List<PaymentDetail> PaymentSchedule { get; set; } = new();
    private bool ShowTable { get; set; } = false;
    private int TableHeight { get; set; } = 0;

    // متغیرهای صفحه‌بندی
    private const int RecordsPerPage = 5;
    private int CurrentPage { get; set; } = 1;
    private int TotalPages => (int)Math.Ceiling((double)PaymentSchedule.Count / RecordsPerPage);
    private IEnumerable<PaymentDetail> PaginatedPaymentSchedule => PaymentSchedule
        .Skip((CurrentPage - 1) * RecordsPerPage)
        .Take(RecordsPerPage);

    private class PaymentDetail
    {
        public int InstallmentNumber { get; set; }
        public double PaymentAmount { get; set; }
        public double PrincipalShare { get; set; }
        public double InterestShare { get; set; }
        public double RemainingBalance { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        LocalInterestRate = InterestRate != 0 ? InterestRate : 20; // مقدار پیش‌فرض از پارامتر
        //RealInterestRate = Math.Max(RealInterestRate, LocalInterestRate); // اطمینان از بزرگ‌تر یا برابر بودن
        await Calculate();
    }

    private async Task Calculate()
    {
        // به‌روزرسانی RealInterestRate با حداقل LocalInterestRate
        //RealInterestRate = Math.Max(RealInterestRate, LocalInterestRate);

        // محاسبه تعداد بازپرداخت تنفس
        //int graceMonths = (int)Math.Ceiling((double)GraceDays / 30);
        double rate = LocalInterestRate / 100 / (12 / PaymentInterval);
        double realRate = RealInterestRate / 100 / (12 / PaymentInterval);
        //int totalPayments = (int)Math.Ceiling((double)PaymentMonths / PaymentInterval); // تعداد کل اقساط
        int totalPayments = PaymentMonths;
        //int totalGracePayments = graceMonths > 0 ? graceMonths : 0;

        // محاسبه PMT برای دوره عادی
        double pmt = PMT(rate, totalPayments, -LoanAmount);
        double realPmt = PMT(realRate, totalPayments, -LoanAmount);

        // محاسبه فرع تنفس
        //double gracePmt = totalGracePayments > 0 ? PMT(rate, totalGracePayments, -LoanAmount) : 0;
        //GraceInterestAmount = gracePmt * totalGracePayments;
        GraceInterestAmount = (LoanAmount * LocalInterestRate * GraceDays) / 36500;

        //MonthlyPayment = pmt + (gracePmt * totalGracePayments / totalPayments);
        MonthlyPayment = pmt + (GraceInterestAmount / totalPayments);
        InterestAmount = (pmt * totalPayments - LoanAmount);
        TotalAmount = LoanAmount + InterestAmount + GraceInterestAmount;
        //FeeAmount = Math.Abs(pmt - realPmt) * totalPayments; // فرمول اصلاح‌شده
        FeeAmount = Math.Abs(PV(Math.Abs(realRate - rate), totalPayments, Math.Abs(realPmt - pmt)*-1));
        //double pv = PV(rate, totalPayments, pmt);
        //double realPV = PV(realRate, totalPayments, realPmt);
        //FeeAmount = Math.Abs(realPV - pv);

        // تولید جدول بازپرداخت
        PaymentSchedule.Clear();
        double remaining = LoanAmount;
        double graceinterestremaining = GraceInterestAmount;
        for (int i = 1; i <= totalPayments; i++)
        {
            double interest = 0;
            double principal = 0;
            if (graceinterestremaining >= MonthlyPayment)
            {
                interest = MonthlyPayment;
                principal = 0;
                graceinterestremaining -= MonthlyPayment;
            }
            else if (graceinterestremaining > 0)
            {
                //interest = (remaining * rate) + graceinterestremaining;
                if (((remaining * rate) + graceinterestremaining) >= MonthlyPayment)
                {
                    interest = MonthlyPayment;
                    principal = 0;
                    graceinterestremaining = 0;
                }
                else
                {
                    interest = (remaining * rate) + graceinterestremaining;
                    principal = MonthlyPayment - interest;
                    if (remaining - principal < 0) principal = remaining;
                    remaining -= principal;
                }
            }
            else
            {
                interest = remaining * rate;
                principal = MonthlyPayment - interest;
                if (remaining - principal < 0) principal = remaining;
                remaining -= principal;
            }


            PaymentSchedule.Add(new PaymentDetail
            {
                InstallmentNumber = i,
                PaymentAmount = (i == totalPayments ? principal + interest:  MonthlyPayment),
                PrincipalShare = principal,
                InterestShare = interest,
                RemainingBalance = remaining
            });
        }

        // بازنشانی صفحه‌بندی
        CurrentPage = 1;
        StateHasChanged();
    }

    private double PMT(double rate, int nper, double pv)
    {
        if (rate == 0) return -pv / nper;
        return -pv * rate / (1 - Math.Pow(1 + rate, -nper));
    }
    private double PV(double rate, int nper, double pmt)
    {
        if (rate == 0) return -(pmt * nper);
        return -(pmt * (1 - Math.Pow(1 + rate, -nper)) / rate);
    }
    private async Task ToggleTable()
    {
        ShowTable = !ShowTable;
        TableHeight = ShowTable ? 400 : 0; // ارتفاع دلخواه برای نمایش جدول
        CurrentPage = 1; // بازنشانی صفحه هنگام باز/بستن جدول
        await Task.CompletedTask;
    }

    private async Task PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            StateHasChanged();
        }
        await Task.CompletedTask;
    }

    private async Task NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
            StateHasChanged();
        }
        await Task.CompletedTask;
    }

    private async Task ExportToExcel()
    {
        // لاجیک ساده برای صدور به اکسل
        Console.WriteLine("Exporting to Excel...");
        await Task.CompletedTask;
    }

    private async Task ExportToPDF()
    {
        // لاجیک ساده برای صدور به PDF
        Console.WriteLine("Exporting to PDF...");
        await Task.CompletedTask;
    }
}