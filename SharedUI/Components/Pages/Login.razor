@page "/login/{Role}"
@inject IAccountService AccountService
@inject IAccessTokenService AccessTokenService
@inject IJsUtil JsUtil
@inject NavigationManager Navigation
@inject ILogger<Login> Logger
@inject ToastService toastService
@inject ITotpService tOtpService

<HeadContent>
    <style>
        .qrcode {
            display: flex;
            justify-content: center;
        }

        .progress {
            max-width: 500px;
            margin: 0 auto;
        }

        .opt-progress-label {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 0.75rem;
            color: var(--bs-body-color);
        }
    </style>
</HeadContent>

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <div class="login-logo">
                <i class="bi bi-fingerprint"></i>
                @* <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512" fill="currentColor" class="svg-icon">
                    <path d="M48 0C21.5 0 0 21.5 0 48L0 464c0 26.5 21.5 48 48 48l96 0 0-80c0-26.5 21.5-48 48-48s48 21.5 48 48l0 80 96 0c26.5 0 48-21.5 48-48l0-416c0-26.5-21.5-48-48-48L48 0zM64 240c0-8.8 7.2-16 16-16l32 0c8.8 0 16 7.2 16 16l0 32c0 8.8-7.2 16-16 16l-32 0c-8.8 0-16-7.2-16-16l0-32zm112-16l32 0c8.8 0 16 7.2 16 16l0 32c0 8.8-7.2 16-16 16l-32 0c-8.8 0-16-7.2-16-16l0-32c0-8.8 7.2-16 16-16zm80 16c0-8.8 7.2-16 16-16l32 0c8.8 0 16 7.2 16 16l0 32c0 8.8-7.2 16-16 16l-32 0c-8.8 0-16-7.2-16-16l0-32zM80 96l32 0c8.8 0 16 7.2 16 16l0 32c0 8.8-7.2 16-16 16l-32 0c-8.8 0-16-7.2-16-16l0-32c0-8.8 7.2-16 16-16zm80 16c0-8.8 7.2-16 16-16l32 0c8.8 0 16 7.2 16 16l0 32c0 8.8-7.2 16-16 16l-32 0c-8.8 0-16-7.2-16-16l0-32zM272 96l32 0c8.8 0 16 7.2 16 16l0 32c0 8.8-7.2 16-16 16l-32 0c-8.8 0-16-7.2-16-16l0-32c0-8.8 7.2-16 16-16z" />
                </svg> *@
            </div>
            <h2 class="login-title">@GetLoginTitle()</h2>
            <p class="login-subtitle">@GetLoginSubtitle()</p>
        </div>

        @if (IsLoading)
        {
            <div class="loading-spinner">
                <div class="spinner"></div>
                <p>در حال بررسی...</p>
            </div>
        }
        else if (Role == "User" || Role == "Admin")
        {
            <!-- Username/Password Login -->
            <div class="login-form">
                <div class="form-group">
                    <label for="username">نام کاربری</label>
                    <input @bind="LoginModel.AccountId"
                           type="text"
                           id="username"
                           class="form-control"
                           placeholder="نام کاربری خود را وارد کنید"
                           disabled="@IsProcessing" />
                </div>

                <div class="form-group">
                    <label for="password">رمز عبور</label>
                    <input @bind="LoginModel.PassKey"
                           type="password"
                           id="password"
                           class="form-control"
                           placeholder="رمز عبور خود را وارد کنید"
                           disabled="@IsProcessing" />
                </div>

                <div class="form-group">
                    <label class="checkbox-container">
                        <input type="checkbox" @bind="RememberMe" />
                        <span class="checkmark"></span>
                        مرا به خاطر بسپار
                    </label>
                </div>

                <button @onclick="HandleLogin"
                        class="btn btn-primary btn-block"
                        disabled="@IsProcessing">
                    @if (IsProcessing)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                    }
                    ورود
                </button>
            </div>
        }
        else
        {
            <!-- SMS/qrCode Login -->
            
                <div class="login-form">
                    @if (!PassKeySent)
                    {
                        <!-- Mobile Number Input -->
                        <div class="input-group mb-3">
                            
                                <input @bind="LoginModel.AccountId"
                                        @onkeypress="HandleMobileKeyPress"
                                        type="tel"
                                        id="mobile"
                                        class="form-control @(HasMobileError ? "is-invalid" : "")"
                                        placeholder="09xxxxxxxxx"
                                        disabled="@IsProcessing"
                                        aria-describedby="button-generatePassKey"/>
                                <button @onclick="GeneratePassKey"
                                        id="button-generatePassKey"
                                        class="btn btn-outline-primary"
                                        disabled="@(IsProcessing || !IsMobileValid)">
                                        <i class="bi bi-box-arrow-in-left"></i>
                                        @* <i class="bi bi-send"></i> *@
                                        @* <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" fill="currentColor" class="svg-icon-3">
                                            <path d="M498.1 5.6c10.1 7 15.4 19.1 13.5 31.2l-64 416c-1.5 9.7-7.4 18.2-16 23s-18.9 5.4-28 1.6L284 427.7l-68.5 74.1c-8.9 9.7-22.9 12.9-35.2 8.1S160 493.2 160 480l0-83.6c0-4 1.5-7.8 4.2-10.8L331.8 202.8c5.8-6.3 5.6-16-.4-22s-15.7-6.4-22-.7L106 360.8 17.7 316.6C7.1 311.3 .3 300.7 0 288.9s5.9-22.8 16.1-28.7l448-256c10.7-6.1 23.9-5.5 34 1.4z" />
                                        </svg> *@
                                </button>
                        </div>
                        @if (HasMobileError)
                        {
                            <div class="invalid-feedback">
                                @MobileErrorMessage
                            </div>
                        }
                        @* <div class="form-group">
                            <label for="mobile">شماره موبایل</label>
                            <div class="input-group">
                                <input @bind="LoginModel.AccountId"
                                        @onkeypress="HandleMobileKeyPress"
                                        type="tel"
                                        id="mobile"
                                        class="form-control @(HasMobileError ? "is-invalid" : "")"
                                        placeholder="09xxxxxxxxx"
                                        disabled="@IsProcessing"
                                        aria-describedby="button-generatePassKey"/>
                                <button @onclick="GeneratePassKey"
                                        id="button-generatePassKey"
                                        class="btn btn-outline-primary"
                                        disabled="@(IsProcessing || !IsMobileValid)">
                                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor" class="svg-icon">
                                            <path d="M498.1 5.6c10.1 7 15.4 19.1 13.5 31.2l-64 416c-1.5 9.7-7.4 18.2-16 23s-18.9 5.4-28 1.6L284 427.7l-68.5 74.1c-8.9 9.7-22.9 12.9-35.2 8.1S160 493.2 160 480l0-83.6c0-4 1.5-7.8 4.2-10.8L331.8 202.8c5.8-6.3 5.6-16-.4-22s-15.7-6.4-22-.7L106 360.8 17.7 316.6C7.1 311.3 .3 300.7 0 288.9s5.9-22.8 16.1-28.7l448-256c10.7-6.1 23.9-5.5 34 1.4z" />
                                        </svg>
                                </button>
                            </div>
                            @if (HasMobileError)
                            {
                                <div class="invalid-feedback">
                                    @MobileErrorMessage
                                </div>
                            }
                        </div> *@
                    }
                    else
                    {
                        <!-- Passkey Input -->
                        <div class="form-group">
                            @if(qrCodeLogin)
                            {
                                <QRCode Content="@_content" Width="190" class="mb-3"></QRCode>
                                <p>با اسکن این کد در یکی از برنامه‌های احراز هویت تلفن همراه خود وارد شوید</p>
                            }
                            <OtpInput Value="@LoginModel.PassKey" class="text-center mb-3"></OtpInput>
                            @if(_remain > _progress)
                            {
                                <div class="position-relative">
                                    <BootstrapBlazor.Components.Progress Value="@_progress" IsShowValue="false"></BootstrapBlazor.Components.Progress>
                                    <span class="opt-progress-label">@_remain</span>
                                </div>
                            }
                            else
                            {
                                <div class="resend-options">
                                    <button @onclick="GeneratePassKey"
                                            class="btn btn-link btn-sm">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor" class="svg-icon">
                                        <path d="M142.9 142.9c-17.5 17.5-30.1 38-37.8 59.8c-5.9 16.7-24.2 25.4-40.8 19.5s-25.4-24.2-19.5-40.8C55.6 150.7 73.2 122 97.6 97.6c87.2-87.2 228.3-87.5 315.8-1L455 55c6.9-6.9 17.2-8.9 26.2-5.2s14.8 12.5 14.8 22.2l0 128c0 13.3-10.7 24-24 24l-8.4 0c0 0 0 0 0 0L344 224c-9.7 0-18.5-5.8-22.2-14.8s-1.7-19.3 5.2-26.2l41.1-41.1c-62.6-61.5-163.1-61.2-225.3 1zM16 312c0-13.3 10.7-24 24-24l7.6 0 .7 0L168 288c9.7 0 18.5 5.8 22.2 14.8s1.7 19.3-5.2 26.2l-41.1 41.1c62.6 61.5 163.1 61.2 225.3-1c17.5-17.5 30.1-38 37.8-59.8c5.9-16.7 24.2-25.4 40.8-19.5s25.4 24.2 19.5 40.8c-10.8 30.6-28.4 59.3-52.9 83.8c-87.2 87.2-228.3 87.5-315.8 1L57 457c-6.9 6.9-17.2 8.9-26.2 5.2S16 449.7 16 440l0-119.6 0-.7 0-7.6z" />
                                    </svg>
                                        تولید مجدد کد
                                    </button>
                                    <button @onclick="(() => {qrCodeLogin = !qrCodeLogin;})"
                                            class="btn btn-link btn-sm">
                                            @if(qrCodeLogin)
                                            {
                                                @* <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor" class="svg-icon">
                                                    <path d="M256 448c141.4 0 256-93.1 256-208S397.4 32 256 32S0 125.1 0 240c0 45.1 17.7 86.8 47.7 120.9c-1.9 24.5-11.4 46.3-21.4 62.9c-5.5 9.2-11.1 16.6-15.2 21.6c-2.1 2.5-3.7 4.4-4.9 5.7c-.6 .6-1 1.1-1.3 1.4l-.3 .3c0 0 0 0 0 0c0 0 0 0 0 0s0 0 0 0s0 0 0 0c-4.6 4.6-5.9 11.4-3.4 17.4c2.5 6 8.3 9.9 14.8 9.9c28.7 0 57.6-8.9 81.6-19.3c22.9-10 42.4-21.9 54.3-30.6c31.8 11.5 67 17.9 104.1 17.9zM96 212.8c0-20.3 16.5-36.8 36.8-36.8l19.2 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-19.2 0c-2.7 0-4.8 2.2-4.8 4.8c0 1.6 .8 3.1 2.2 4l29.4 19.6c10.3 6.8 16.4 18.3 16.4 30.7c0 20.3-16.5 36.8-36.8 36.8L112 304c-8.8 0-16-7.2-16-16s7.2-16 16-16l27.2 0c2.7 0 4.8-2.2 4.8-4.8c0-1.6-.8-3.1-2.2-4l-29.4-19.6C102.2 236.7 96 225.2 96 212.8zM372.8 176l19.2 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-19.2 0c-2.7 0-4.8 2.2-4.8 4.8c0 1.6 .8 3.1 2.2 4l29.4 19.6c10.2 6.8 16.4 18.3 16.4 30.7c0 20.3-16.5 36.8-36.8 36.8L352 304c-8.8 0-16-7.2-16-16s7.2-16 16-16l27.2 0c2.7 0 4.8-2.2 4.8-4.8c0-1.6-.8-3.1-2.2-4l-29.4-19.6c-10.2-6.8-16.4-18.3-16.4-30.7c0-20.3 16.5-36.8 36.8-36.8zm-152 6.4L256 229.3l35.2-46.9c4.1-5.5 11.3-7.8 17.9-5.6s10.9 8.3 10.9 15.2l0 96c0 8.8-7.2 16-16 16s-16-7.2-16-16l0-48-19.2 25.6c-3 4-7.8 6.4-12.8 6.4s-9.8-2.4-12.8-6.4L224 240l0 48c0 8.8-7.2 16-16 16s-16-7.2-16-16l0-96c0-6.9 4.4-13 10.9-15.2s13.7 .1 17.9 5.6z" />
                                                </svg> *@
                                                <i class="bi bi-chat-left-text"></i>
                                                <span>ورود با ارسال کد</span>
                                            }
                                            else
                                            {
                                                @* <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" fill="currentColor" class="svg-icon">
                                                    <path d="M0 80C0 53.5 21.5 32 48 32l96 0c26.5 0 48 21.5 48 48l0 96c0 26.5-21.5 48-48 48l-96 0c-26.5 0-48-21.5-48-48L0 80zM64 96l0 64 64 0 0-64L64 96zM0 336c0-26.5 21.5-48 48-48l96 0c26.5 0 48 21.5 48 48l0 96c0 26.5-21.5 48-48 48l-96 0c-26.5 0-48-21.5-48-48l0-96zm64 16l0 64 64 0 0-64-64 0zM304 32l96 0c26.5 0 48 21.5 48 48l0 96c0 26.5-21.5 48-48 48l-96 0c-26.5 0-48-21.5-48-48l0-96c0-26.5 21.5-48 48-48zm80 64l-64 0 0 64 64 0 0-64zM256 304c0-8.8 7.2-16 16-16l64 0c8.8 0 16 7.2 16 16s7.2 16 16 16l32 0c8.8 0 16-7.2 16-16s7.2-16 16-16s16 7.2 16 16l0 96c0 8.8-7.2 16-16 16l-64 0c-8.8 0-16-7.2-16-16s-7.2-16-16-16s-16 7.2-16 16l0 64c0 8.8-7.2 16-16 16l-32 0c-8.8 0-16-7.2-16-16l0-160zM368 480a16 16 0 1 1 0-32 16 16 0 1 1 0 32zm64 0a16 16 0 1 1 0-32 16 16 0 1 1 0 32z" />
                                                </svg> *@
                                                <i class="bi bi-qr-code-scan"></i>
                                                <span>ورود با کیوآرکد</span>
                                            }
                                            
                                    </button>
                                </div>
                            }

                            
                        </div>

                        <button @onclick="HandleLogin"
                                class="btn btn-primary btn-block"
                                disabled="@(IsProcessing || string.IsNullOrEmpty(LoginModel.PassKey))">
                            @if (IsProcessing)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            ورود
                        </button>

                        <button @onclick="(() => { PassKeySent = false; })"
                                class="btn btn-outline-secondary btn-block mt-2">
                            @* <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor" class="svg-icon">
                                <path d="M386.3 160L336 160c-17.7 0-32 14.3-32 32s14.3 32 32 32l128 0c17.7 0 32-14.3 32-32l0-128c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 51.2L414.4 97.6c-87.5-87.5-229.3-87.5-316.8 0s-87.5 229.3 0 316.8s229.3 87.5 316.8 0c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0c-62.5 62.5-163.8 62.5-226.3 0s-62.5-163.8 0-226.3s163.8-62.5 226.3 0L386.3 160z" />
                            </svg> *@
                            <i class="bi bi-arrow-clockwise"></i>
                            تغییر شماره موبایل
                        </button>
                    }
            
                </div>
                
        }

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger mt-3">
                <i class="bi bi-exclamation-triangle"></i>
                @ErrorMessage
            </div>
        }

        
       
    </div>
</div>
    



    <!-- QR Code Modal -->
    @*@if (qrCodeLogin)
    {
        <div class="modal-overlay" @onclick="HideQRCode">
            <div class="qr-modal" @onclick:stopPropagation="true">
                <div class="qr-header">
                    <h4>اسکن QR Code</h4>
                    <button @onclick="HideQRCode" class="btn-close">×</button>
                </div>
                <div class="qr-content">
                    <div class="qr-code-container">
                        @if (!string.IsNullOrEmpty(QrCodeData))
                        {
                            <div id="qrcode"></div>
                        }
                    </div>
                    <p>با اسکن این کد توسط تلفن همراه خود وارد شوید</p>
                </div>
            </div>
        </div>
    }*@
    
    @*@if (qrCodeLogin)
    {
        <div class="modal-overlay" @onclick="HideQRCode">
            <div class="qr-modal" @onclick:stopPropagation="true">
                <div class="qr-header">
                    <h4>اسکن QR کد</h4>
                    <button class="close-btn" @onclick="HideQRCode">
                        <i class="fa fa-times"></i>
                    </button>
                </div>
                <div class="qr-body">
                    <div class="qr-code-container">
                        <img src="@qrCodeImage" alt="QR Code" class="qr-code" />
                    </div>
                    <p class="qr-instructions">
                        QR کد را با تلفن همراه خود اسکن کنید
                    </p>
                </div>
            </div>
        </div>
    }*@

    <!-- Toast Notifications
@*    @if (showToast)
    {
        <div class="toast-container">
            <div class="toast @(toastType == "success" ? "toast-success" : "toast-error")">
                <div class="toast-header">
                    <i class="fa @(toastType == "success" ? "fa-check-circle" : "fa-exclamation-circle")"></i>
                    <span>@toastTitle</span>
                    <button class="toast-close" @onclick="HideToast">
                        <i class="fa fa-times"></i>
                    </button>
                </div>
                <div class="toast-body">
                    @toastMessage
                </div>
            </div>
        </div>
    }*@
 -->



@code {
    [Parameter] public string Role { get; set; } = "customer";

    private LoginRequest LoginModel = new();
    private bool IsLoading = true;
    private bool IsProcessing = false;
    private string GeneratedPassKey = string.Empty;
    private bool PassKeySent = false;
    private bool RememberMe = false;
    private bool qrCodeLogin = false;
    private bool showToast = false;
    private string toastType = "";
    private string toastTitle = "";
    private string toastMessage = "";
    private string qrCodeImage = "";
    private string qrSessionToken = "";
    private bool HasMobileError = false;

    private string ErrorMessage = "";
    private string MobileErrorMessage = "";
    private string QrCodeData = "";
    private string SessionToken = "";

    private int CountdownSeconds = 0;
    private System.Threading.Timer? CountdownTimer;

    private bool IsMobileValid => !string.IsNullOrEmpty(LoginModel.AccountId) &&
                                 IsValidMobileNumber(LoginModel.AccountId);



    private string _content = "";

    private string? _code;

    private double _progress = 0;

    private int _remain = 0;

    protected override async Task OnInitializedAsync()
    {
        await CheckExistingToken();
        IsLoading = false;
    }

    private async Task CheckExistingToken()
    {
        try
        {
            var token = await AccessTokenService.GetToken();
            if (!string.IsNullOrEmpty(token))
            {
                var validationResult = await AccountService.ValidateTokenAsync(token);
                if (validationResult.Successful)
                {
                    await AccessTokenService.SetToken(token);
                    await RedirectBasedOnRole();
                    return;
                }
                else
                {
                    await AccessTokenService.RemoveToken();
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error checking existing token");
        }
    }

    private async Task SendPassKey()
    {


        try
        {
            #if DEBUG
                await toastService.Show(new ToastOption()
                    {
                        Category = ToastCategory.Success,
                        Title = "",
                        Content = GeneratedPassKey
                    }, new ToastContainer { Placement = Placement.TopCenter });
           
            #else
                var result = await AccountService.SendPassKeyAsync(LoginModel.AccountId!, GeneratedPassKey);

                if (result)
                {
                    PassKeySent = true;
                    //StartCountdown();
                    IsProcessing = false;
                    _progress = 0;
                    _remain = 120;

                    //await JSRuntime.InvokeVoidAsync("showToast", $"کد تایید ارسال شد", "success");
                    //await JsUtil.Alert("کد تایید ارسال شد");
                    await toastService.Show(new ToastOption()
                    {
                        Category = ToastCategory.Success,
                        Title = "",
                        Content = "کد تایید ارسال شد"
                    }, new ToastContainer { Placement = Placement.TopCenter });
                }
                else
                {
                    HasMobileError = true;
                    MobileErrorMessage = "خطا در ارسال پیامک";
                }
            #endif
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error sending SMS code");
            HasMobileError = true;
            MobileErrorMessage = "خطا در ارسال پیامک";
        }
        finally
        {
            IsProcessing = false;
        }
    }
    private async void GeneratePassKey()
    {
        if (!IsMobileValid) return;

        IsProcessing = true;
        ErrorMessage = "";
        HasMobileError = false;
        GeneratedPassKey = string.Empty;


        _content = tOtpService.GenerateOtpUri(new OtpOptions()
        {
            AccountName = "AlphaLeasing",
            IssuerName = "AlphaLeasing",
            UserName = LoginModel.AccountId,
            SecretKey = "OMM2LVLFX6QJHMYI",
            Algorithm = OtpHashMode.Sha1,
            Type = OtpType.Totp
        });
        GeneratedPassKey = tOtpService.Compute("OMM2LVLFX6QJHMYI");

        if (qrCodeLogin)
        {
            PassKeySent = true;
            IsProcessing = false;
            _progress = 0;
            _remain = 120;
        }
        else
            await SendPassKey();

        // var random = new Random();
        // GeneratedPassKey = random.Next(100000, 999999).ToString();
    }
    private async Task ResendSmsCode()
    {
        await SendPassKey();
    }

    private async Task HandleLogin()
    {
        IsProcessing = true;
        ErrorMessage = "";

        try
        {
            var result = await AccountService.LoginAsync(LoginModel);

            if (result.Successful && result.Item != null)
            {
                var token = result.Item.AccessToken;

                if (RememberMe || (Role == "Customer" || Role == "Supplier"))
                {
                    await AccessTokenService.SetToken(token!);
                }

                await RedirectBasedOnRole();
            }
            else
            {
                ErrorMessage = result.Error ?? "خطا در ورود";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during login");
            ErrorMessage = "خطا در ورود";
        }
        finally
        {
            IsProcessing = false;
        }
    }

    private async Task ShowQRCode()
    {
        _content = tOtpService.GenerateOtpUri(new OtpOptions()
        {
            AccountName = "AlphaLeasing",
            IssuerName = "AlphaLeasing",
            UserName = "Simulator",
            SecretKey = "OMM2LVLFX6QJHMYI",
            Algorithm = OtpHashMode.Sha1,
            Type = OtpType.Totp
        });
        _code = tOtpService.Compute("OMM2LVLFX6QJHMYI");
    }
    private async Task ShowQrCode()
    {
        try
        {
            // SessionToken = Guid.NewGuid().ToString();

            // var qrRequest = new JwtTokenRequest
            // {
            //     AccountId = SessionToken,
            //     Role = Role,
            //     TokenType = "QR"
            // };

            var qrResult = await AccountService.LoginAsync(LoginModel);

            if (qrResult.Successful && qrResult.Item != null)
            {
                QrCodeData = qrResult.Item.AccessToken!;
                qrCodeLogin = true;

                //await JSRuntime.InvokeVoidAsync("generateQRCode", QrCodeData);
                await JsUtil.Alert("کد تایید ارسال شد");
                _ = Task.Run(async () => await PollQrLogin());
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error generating QR code");
        }
    }
    private async Task ShowqrCode()
    {
        try
        {
            qrSessionToken = Guid.NewGuid().ToString();
            var qrData = new
            {
                Url = $"{Navigation.BaseUri}Account/QRLogin",
                Token = qrSessionToken,
                Role = Role,
                MobileNumber = LoginModel.AccountId
            };

            // var qrContent = JsonSerializer.Serialize(qrData);
            // var qrGenerator = new QRCodeGenerator();
            // var qrCodeData = qrGenerator.CreateQrCode(qrContent, QRCodeGenerator.ECCLevel.Q);
            // var qrCode = new Base64QRCode(qrCodeData);
            // qrCodeImage = qrCode.GetGraphic(20);

            qrCodeLogin = true;

            // Start polling for QR code scan
            await PollQrLogin();
        }
        catch (Exception ex)
        {
            await toastService.Error("خطا", "خطا در تولید QR کد");
            await toastService.Show(new ToastOption()
            {
                // Notification category
                Category = ToastCategory.Error,

                // Notification box Title value
                Title = "خطا",

                // Notification body content
                Content = "خطا در تولید QR کد",
                
                
            },new ToastContainer {Placement = Placement.TopCenter});
        }
    }
    private async Task PollQrLogin()
    {
        var attempts = 0;
        while (qrCodeLogin && attempts < 60)
        {
            try
            {
                var validationResult = await AccountService.ValidateTokenAsync(QrCodeData);
                if (validationResult.Successful)
                {
                    await AccessTokenService.SetToken(QrCodeData);
                    await InvokeAsync(async () =>
                    {
                        qrCodeLogin = false;
                        await RedirectBasedOnRole();
                    });
                    return;
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error checking QR login");
            }

            await Task.Delay(2000);
            attempts++;
        }
    }

    private void HideQRCode()
    {
        qrCodeLogin = false;
    }

    private void BackToMobileInput()
    {
        PassKeySent = false;
        GeneratedPassKey = string.Empty;
        StopCountdown();
    }

    private void StartCountdown()
    {
        CountdownSeconds = 120;
        CountdownTimer = new System.Threading.Timer(async _ =>
        {
            CountdownSeconds--;
            await InvokeAsync(StateHasChanged);

            if (CountdownSeconds <= 0)
            {
                StopCountdown();
            }
        }, null, 1000, 1000);
    }

    private void StopCountdown()
    {
        CountdownTimer?.Dispose();
        CountdownTimer = null;
        CountdownSeconds = 0;
    }

    private async Task RedirectBasedOnRole()
    {
        var redirectUrl = Role switch
        {
            "Customer" => "/customer/dashboard",
            "Supplier" => "/supplier/dashboard",
            "User" => "/user/dashboard",
            "Admin" => "/admin/dashboard",
            _ => "/dashboard"
        };

        await Task.Run(() => Navigation.NavigateTo(redirectUrl));
    }

    private string GetLoginTitle()
    {
        return Role switch
        {
            "Customer" => "ورود مشتری",
            "Supplier" => "ورود تامین کننده",
            "User" => "ورود کاربر",
            "Admin" => "ورود مدیر سیستم",
            _ => "ورود"
        };
    }

    private string GetLoginSubtitle()
    {
        return Role switch
        {
            "Customer" => "به پنل مشتری لیزینگ آلفا خوش آمدید",
            "Supplier" => "به پنل تامین کننده لیزینگ آلفا خوش آمدید",
            "User" => "به پنل کاربری لیزینگ آلفا خوش آمدید",
            "Admin" => "به پنل مدیریت لیزینگ آلفا خوش آمدید",
            _ => "به سیستم لیزینگ آلفا خوش آمدید"
        };
    }

    private bool IsValidMobileNumber(string mobile)
    {
        if (string.IsNullOrEmpty(mobile)) return false;

        var digits = new string(mobile.Where(char.IsDigit).ToArray());

        return digits.Length == 11 && digits.StartsWith("09");
    }

    private string FormatCountdown(int seconds)
    {
        var minutes = seconds / 60;
        var secs = seconds % 60;
        return $"{minutes:D2}:{secs:D2}";
    }

    private async Task HandleMobileKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && IsMobileValid)
        {
            await SendPassKey();
        }
    }

    private async Task HandleSmsKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrEmpty(LoginModel.PassKey))
        {
            await HandleLogin();
        }
    }

    public void Dispose()
    {
        CountdownTimer?.Dispose();
    }
    
}