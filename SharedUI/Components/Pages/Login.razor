@page "/login/{roleforlogin}"
@inject IAccountService AccountService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IAccessTokenService TokenService
@inject IJSRuntime JS

<div class="login-container">
    @if (isAuthenticated)
    {
        <p>شما وارد شده‌اید. در حال انتقال...</p>
    }
    else
    {
        {
            var role = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query.TrimStart('?').Split('&')
                .Select(q => q.Split('='))
                .Where(q => q.Length == 2 && q[0].ToLower() == "role")
                .Select(q => q[1])
                .FirstOrDefault() ?? "Default";
        }

        if (roleforlogin == StringRoleResources.User || roleforlogin == StringRoleResources.Admin)
        {
            <div class="login-form">
                <div class="form-group">
                    <label for="username">نام کاربری</label>
                    <input type="text" id="username" class="form-control" @bind="Username" />
                </div>
                <div class="form-group">
                    <label for="password">رمز عبور</label>
                    <input type="password" id="password" class="form-control" @bind="Password" />
                </div>
                <button class="btn btn-primary" @onclick="LoginAsync">ورود</button>
                <p class="text-danger">@ErrorMessage</p>
            </div>
        }
        else if (roleforlogin == StringRoleResources.Customer || roleforlogin == StringRoleResources.Supplier)
        {
            <div class="login-form">
                <div class="form-group">
                    <label for="mobileNumber">شماره موبایل</label>
                    <div class="input-group">
                        <input type="text" id="mobileNumber" class="form-control" @bind="MobileNumber" @oninput="ValidateMobile" />
                        <div class="input-group-append">
                            <button class="btn btn-secondary" @onclick="SendCode" disabled="@(!IsMobileValid)">
                                <span class="icon-eye"></span>
                            </button>
                        </div>
                    </div>
                    <small class="text-danger" style="display: @MobileValidationMessageDisplay;">@MobileValidationMessage</small>
                </div>

                @if (ShowCodeInput)
                {
                    <div class="form-group">
                        <label for="verificationCode">کد پیامک شده</label>
                        <input type="text" id="verificationCode" class="form-control" @bind="VerificationCode" />
                    </div>
                    <button class="btn btn-primary" @onclick="VerifyCode">ورود</button>
                }
                <p class="text-danger">@ErrorMessage</p>
            </div>
        }
    }
</div>

@code {

    [Parameter]

    private string roleforlogin { get; set; } = StringRoleResources.User;
    private string Username { get; set; }
    private string Password { get; set; }
    private string MobileNumber { get; set; }
    private string VerificationCode { get; set; }
    private bool IsMobileValid { get; set; }
    private string MobileValidationMessage { get; set; } = "شماره موبایل باید با 09 شروع شود و 11 رقم باشد.";
    private string MobileValidationMessageDisplay { get; set; } = "none";
    private bool ShowCodeInput { get; set; }
    private string ErrorMessage { get; set; }
    private bool isAuthenticated { get; set; }

    
    protected override async Task OnInitializedAsync()
    {
        var token = await TokenService.GetToken();
        if (!string.IsNullOrEmpty(token))
        {
            var result = await AccountService.ValidateToken(token);
            if (result.Successful)
            {
                isAuthenticated = true;
                await AuthenticateUser();
                RedirectBasedOnRole();
            }
        }
    }

    // private async Task<bool> ValidateToken(string token)
    // {
    //     var result = await AccountService.ValidateToken(token);
    //     if (result.Successful)
    //     {
    //         var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
    //         var jwtToken = handler.ReadToken(token) as System.IdentityModel.Tokens.Jwt.JwtSecurityToken;
    //         var roleClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;
    //         var userIdClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
    //         await TokenService.SetToken(token); // به‌روزرسانی توکن در صورت نیاز
    //         return true;
    //     }
    //     return false;
    // }

    void ValidateMobile()
    {
        if (string.IsNullOrEmpty(MobileNumber) || MobileNumber.Length != 11 || !MobileNumber.StartsWith("09"))
        {
            IsMobileValid = false;
            MobileValidationMessageDisplay = "block";
        }
        else
        {
            IsMobileValid = true;
            MobileValidationMessageDisplay = "none";
        }
    }

    private async Task SendCode()
    {
        if (IsMobileValid)
        {
            var loginRequest = new LoginRequest { AccountId = MobileNumber };
            var result = await AccountService.LoginAsync(loginRequest);
            if (result.Successful)
            {
                ShowCodeInput = true;
                StateHasChanged();
            }
            else
            {
                ErrorMessage = result.Error ?? "خطا در ارسال کد.";
            }
        }
    }

    private async Task LoginAsync()
    {
        var loginRequest = new LoginRequest { AccountId = Username,RoleForLogin = roleforlogin, PassKey = Password };
        var result = await AccountService.LoginAsync(loginRequest);
        if (result.Successful && result.Item!.AccessToken is string token)
        {
            await TokenService.SetToken(token);
            await AuthenticateUser();
            RedirectBasedOnRole();
        }
        else
        {
            ErrorMessage = result.Error ?? "نام کاربری یا رمز عبور اشتباه است.";
        }
    }

    private async Task VerifyCode()
    {
        var loginRequest = new LoginRequest { AccountId = MobileNumber, RoleForLogin = roleforlogin,  PassKey = VerificationCode };
        var result = await AccountService.LoginAsync(loginRequest);
        if(result.Successful && result.Item!.AccessToken is string token)
        {
            await TokenService.SetToken(token);
            await AuthenticateUser();
            RedirectBasedOnRole();
        }
        else
        {
            ErrorMessage = result.Error ?? "کد تأیید اشتباه است.";
        }
    }

    private async Task AuthenticateUser()
    {
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }

    private void RedirectBasedOnRole()
    {
        var role = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query.TrimStart('?').Split('&')
            .Select(q => q.Split('='))
            .Where(q => q.Length == 2 && q[0].ToLower() == "role")
            .Select(q => q[1])
            .FirstOrDefault() ?? "Default";
        switch (role)
        {
            case "Admin":
                NavigationManager.NavigateTo("/admin/dashboard");
                break;
            case "User":
                NavigationManager.NavigateTo("/user/dashboard");
                break;
            case "Customer":
                NavigationManager.NavigateTo("/customer/dashboard");
                break;
            case "Supplier":
                NavigationManager.NavigateTo("/supplier/dashboard");
                break;
            default:
                NavigationManager.NavigateTo("/");
                break;
        }
    }
}