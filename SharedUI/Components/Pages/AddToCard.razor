@page "/agents/addtocard"


@* @inject AppDbContext DbContext *@

<div class="product-selection-container">
    <!-- شماره درخواست و سبد خرید -->
    <div class="request-info">
        <span>شماره درخواست: @RequestNumber</span>
        <button class="btn btn-link p-0 ms-2" @onclick="ShowCartModal">
            <i class="bi bi-cart"></i>
            @if (CartItems.Any())
            {
                <span class="badge bg-danger rounded-circle position-absolute">@CartItems.Count</span>
            }
        </button>
    </div>

    <!-- ویزارد -->
    <div class="wizard">
        @foreach (var step in WizardSteps)
        {
            <div class="wizard-step @(step.Number <= CurrentStep ? "active" : "")" @onclick="() => SetStep(step.Number)">
                <span class="step-number">@step.Number</span>
                <span class="step-label">@step.Label</span>
            </div>
            @if (step.Number < WizardSteps.Count)
            {
                <div class="wizard-line"></div>
            }
        }
    </div>

    <!-- محتوای اصلی -->
    @if (ShowCategories)
    {
        <!-- دسته‌بندی‌ها -->
        <div class="categories-section">
            <h5>گروه‌های کالایی</h5>
            <div class="category-list">
                @foreach (var category in ProductCategories)
                {
                    <div class="category-item" @onclick="() => SelectCategory(category)">
                        <img src="@category.ImageUrl" alt="@category.Name" class="category-image" />
                        <p>@category.Name</p>
                    </div>
                }
            </div>
            <nav aria-label="Category pagination" class="d-none d-md-block">
                <ul class="pagination">
                    <li class="page-item active"><a class="page-link" href="#">1</a></li>
                    <li class="page-item"><a class="page-link" href="#">2</a></li>
                    <li class="page-item"><a class="page-link" href="#">3</a></li>
                </ul>
            </nav>

            <h5>دسته‌بندی‌های بیزینسی</h5>
            <div class="category-list">
                @foreach (var category in BusinessCategories)
                {
                    <div class="category-item" @onclick="() => SelectCategory(category)">
                        <img src="@category.ImageUrl" alt="@category.Name" class="category-image" />
                        <p>@category.Name</p>
                    </div>
                }
            </div>
            <nav aria-label="Business category pagination" class="d-none d-md-block">
                <ul class="pagination">
                    <li class="page-item active"><a class="page-link" href="#">1</a></li>
                    <li class="page-item"><a class="page-link" href="#">2</a></li>
                    <li class="page-item"><a class="page-link" href="#">3</a></li>
                </ul>
            </nav>
        </div>
    }
    else
    {
        <!-- لیست کالاها -->
        <div class="products-section">
            <button class="btn btn-outline-secondary mb-3" @onclick="() => ShowCategories = true">بازگشت</button>
            <div class="filters mb-3">
                <input type="text" class="form-control d-inline-block w-auto me-2" placeholder="جستجو..." @bind="SearchTerm" @bind:event="oninput" />
                <select class="form-select d-inline-block w-auto" @bind="SortOption">
                    <option value="name">مرتب‌سازی بر اساس نام</option>
                    <option value="price">مرتب‌سازی بر اساس قیمت</option>
                </select>
            </div>
            <div class="product-list">
                @foreach (var product in FilteredProducts)
                {
                    <div class="product-item">
                        <input type="checkbox" checked="@product.IsSelected" @onchange="e => ToggleProductSelection(product, (bool)e.Value)" />
                        <span>@product.Name - @product.Price تومان</span>
                    </div>
                }
            </div>
        </div>
    }

    <!-- مودال سبد خرید -->
    @if (IsCartModalOpen)
    {
        <div class="modal fade show d-block" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">سبد خرید</h5>
                        <button type="button" class="btn-close" @onclick="CloseCartModal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        @if (CartItems.Any())
                        {
                            <ul class="list-group">
                                @foreach (var item in CartItems)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        @item.Product.Name - @item.Product.Price تومان
                                        <button class="btn btn-sm btn-danger" @onclick="() => RemoveFromCart(item)">حذف</button>
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p>سبد خرید خالی است.</p>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseCartModal">بستن</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    <!-- دکمه‌ها -->
    <div class="action-buttons">
        <button class="btn btn-danger" @onclick="Continue" disabled="@(!CartItems.Any())">ادامه</button>
        <button class="btn btn-outline-secondary" @onclick="Save">ذخیره</button>
        <button class="btn btn-outline-secondary" @onclick="AddNewProduct">ثبت کالا</button>
    </div>
</div>

@code {
    private string RequestNumber { get; set; }
    private int CurrentStep { get; set; } = 1;
    private bool ShowCategories { get; set; } = true;
    private string SearchTerm { get; set; } = "";
    private string SortOption { get; set; } = "name";
    private bool IsCartModalOpen { get; set; } = false;

    [Parameter]
    public List<WizardStep> WizardSteps { get; set; } = new List<WizardStep>
    {
        new WizardStep { Number = 1, Label = "انتخاب کالا" },
        new WizardStep { Number = 2, Label = "اعتبارسنجی" },
        new WizardStep { Number = 3, Label = "طرح تسهیلات" },
        new WizardStep { Number = 4, Label = "تضامین/وثائق" },
        new WizardStep { Number = 5, Label = "آپلود مدارک و ثبت نهایی" }
    };

    private List<ProductCategory> ProductCategories { get; set; } = new List<ProductCategory>();
    private List<ProductCategory> BusinessCategories { get; set; } = new List<ProductCategory>();
    private List<Product> Products { get; set; } = new List<Product>();
    private List<Product> FilteredProducts => Products
        .Where(p => string.IsNullOrEmpty(SearchTerm) || p.Name.Contains(SearchTerm))
        .OrderBy(p => SortOption == "name" ? p.Name : p.Price.ToString())
        .ToList();
    private List<CartItem> CartItems { get; set; } = new List<CartItem>();

    private void SetStep(int step)
    {
        if (step <= CurrentStep)
        {
            CurrentStep = step;
        }
    }

    private void SelectCategory(ProductCategory category)
    {
        ShowCategories = false;
        // بارگذاری محصولات مربوط به دسته‌بندی (شبیه‌سازی)
        //Products = DbContext.Products.Where(p => p.CategoryId == category.Id).ToList();
    }

    private void ToggleProductSelection(Product product, bool isSelected)
    {
        product.IsSelected = isSelected;
        if (isSelected && !CartItems.Any(ci => ci.ProductId == product.Id))
        {
            var cartItem = new CartItem { RequestNumber = RequestNumber, ProductId = product.Id, Product = product };
            CartItems.Add(cartItem);
            //DbContext.CartItems.Add(cartItem);
            //DbContext.SaveChanges();
        }
        else if (!isSelected && CartItems.Any(ci => ci.ProductId == product.Id))
        {
            var cartItem = CartItems.First(ci => ci.ProductId == product.Id);
            CartItems.Remove(cartItem);
            //DbContext.CartItems.Remove(cartItem);
            //DbContext.SaveChanges();
        }
    }

    private void RemoveFromCart(CartItem cartItem)
    {
        var product = Products.FirstOrDefault(p => p.Id == cartItem.ProductId);
        if (product != null) product.IsSelected = false;
        CartItems.Remove(cartItem);
        //DbContext.CartItems.Remove(cartItem);
        //DbContext.SaveChanges();
    }

    private void ShowCartModal()
    {
        IsCartModalOpen = true;
    }

    private void CloseCartModal()
    {
        IsCartModalOpen = false;
    }

    private void Continue()
    {
        if (CartItems.Any())
        {
            CurrentStep = 2;
            // انتقال به مرحله بعدی (در آینده پیاده‌سازی می‌شود)
        }
    }

    private void Save()
    {
        // ذخیره در دیتابیس (در حال حاضر فقط سبد خرید ذخیره می‌شود)
        System.Console.WriteLine("درخواست ذخیره شد.");
    }

    private void AddNewProduct()
    {
        // منطق افزودن کالای جدید (شبیه‌سازی)
        var newProduct = new Product { Name = "کالای جدید", Price = 10_000_000, CategoryId = ProductCategories.First().Id };
        //DbContext.Products.Add(newProduct);
        //DbContext.SaveChanges();
        Products.Add(newProduct);
        var cartItem = new CartItem { RequestNumber = RequestNumber, ProductId = newProduct.Id, Product = newProduct };
        CartItems.Add(cartItem);
        //DbContext.CartItems.Add(cartItem);
        //DbContext.SaveChanges();
    }

    protected override async Task OnInitializedAsync()
    {
        // بارگذاری شماره درخواست (شبیه‌سازی API)
        RequestNumber = await Task.FromResult($"REQ-{DateTime.Now:yyyyMMdd}-{new Random().Next(100, 999)}");

        // بارگذاری دسته‌بندی‌ها و محصولات از دیتابیس
        //ProductCategories = await DbContext.ProductCategories.Where(c => c.IsBusinessCategory == false).ToListAsync();
        //BusinessCategories = await DbContext.ProductCategories.Where(c => c.IsBusinessCategory == true).ToListAsync();
        //Products = await DbContext.Products.ToListAsync();
        //CartItems = await DbContext.CartItems.Include(ci => ci.Product).Where(ci => ci.RequestNumber == RequestNumber).ToListAsync();

        // داده‌های پیش‌فرض در صورت خالی بودن دیتابیس
        if (!ProductCategories.Any())
        {
            ProductCategories = new List<ProductCategory>
            {
                new ProductCategory { Id = 1, Name = "خودرو", ImageUrl = "https://via.placeholder.com/150", IsBusinessCategory = false },
                new ProductCategory { Id = 2, Name = "طلا و جواهر", ImageUrl = "https://via.placeholder.com/150", IsBusinessCategory = false },
                new ProductCategory { Id = 3, Name = "کالاهای الکترونیکی", ImageUrl = "https://via.placeholder.com/150", IsBusinessCategory = false },
                new ProductCategory { Id = 4, Name = "لوازم خانگی", ImageUrl = "https://via.placeholder.com/150", IsBusinessCategory = false }
            };
            //DbContext.ProductCategories.AddRange(ProductCategories);
        }

        if (!BusinessCategories.Any())
        {
            BusinessCategories = new List<ProductCategory>
            {
                new ProductCategory { Id = 5, Name = "بیشترین تخفیف‌ها", ImageUrl = "https://via.placeholder.com/150", IsBusinessCategory = true },
                new ProductCategory { Id = 6, Name = "پرطرفدارترین کالاها", ImageUrl = "https://via.placeholder.com/150", IsBusinessCategory = true },
                new ProductCategory { Id = 7, Name = "جدیدترین کالاها", ImageUrl = "https://via.placeholder.com/150", IsBusinessCategory = true }
            };
            //DbContext.ProductCategories.AddRange(BusinessCategories);
        }

        if (!Products.Any())
        {
            Products = new List<Product>
            {
                new Product { Id = 1, Name = "خودروی پراید", Price = 200_000_000, CategoryId = 1 },
                new Product { Id = 2, Name = "گوشی سامسونگ", Price = 15_000_000, CategoryId = 3 },
                new Product { Id = 3, Name = "لپ‌تاپ لنوو", Price = 25_000_000, CategoryId = 3 },
                new Product { Id = 4, Name = "یخچال سامسونگ", Price = 30_000_000, CategoryId = 4 }
            };
            //DbContext.Products.AddRange(Products);
        }

        //await DbContext.SaveChangesAsync();
    }

    public class WizardStep
    {
        public int Number { get; set; }
        public string Label { get; set; }
    }
}