<div class="cart-container">
    <button class="btn btn-light rounded-circle position-relative" @onclick="ToggleCart">
        @* <i class="bi bi-cart3"></i> *@
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512" class="svg-icon-2 primary-color" fill="currentColor">
            <path d="M0 24C0 10.7 10.7 0 24 0L69.5 0c22 0 41.5 12.8 50.6 32l411 0c26.3 0 45.5 25 38.6 50.4l-41 152.3c-8.5 31.4-37 53.3-69.5 53.3l-288.5 0 5.4 28.5c2.2 11.3 12.1 19.5 23.6 19.5L488 336c13.3 0 24 10.7 24 24s-10.7 24-24 24l-288.3 0c-34.6 0-64.3-24.6-70.7-58.5L77.4 54.5c-.7-3.8-4-6.5-7.9-6.5L24 48C10.7 48 0 37.3 0 24zM128 464a48 48 0 1 1 96 0 48 48 0 1 1 -96 0zm336-48a48 48 0 1 1 0 96 48 48 0 1 1 0-96z" />
        </svg>
        @if (TotalItems > 0)
        {
            <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-primary">
                @TotalItems
                <span class="visually-hidden">items in cart</span>
            </span>
        }
    </button>

    <div class="cart-content @(IsCartVisible ? "show" : "")" @onclick:stopPropagation>
        @if (CartItems?.Any() ?? false)
        {
            <div class="cart-items">
                @foreach (var item in CartItems)
                {
                    <div class="cart-item row align-items-center mb-3">
                        <div class="col-2">
                            <img src="@item.ImageUrl" class="img-fluid" alt="@item.ProductName" />
                        </div>
                        <div class="col-4">
                            <h6>@item.ProductName</h6>
                            <small>@item.UnitPrice.ToString("N0") تومان</small>
                        </div>
                        <div class="col-3">
                            <div class="input-group input-group-sm">
                                <button class="btn btn-outline-secondary" @onclick="@(() => UpdateQuantity(item, -1))">-</button>
                                <input type="number" class="form-control text-center" @bind="item.Quantity" @bind:after="() => UpdateQuantity(item, 0)" min="1" />
                                <button class="btn btn-outline-secondary" @onclick="@(() => UpdateQuantity(item, 1))">+</button>
                            </div>
                        </div>
                        <div class="col-2 text-end">
                            <span>@(CalculateItemTotal(item).ToString("N0")) تومان</span>
                        </div>
                        <div class="col-1">
                            <button class="btn btn-danger btn-sm" @onclick="@(() => RemoveItem(item.Id))"><i class="bi bi-trash"></i></button>
                        </div>
                    </div>
                }
            </div>
            <div class="cart-summary">
                <p>جمع کل: @(TotalAmount.ToString("N0")) تومان</p>
                <p>تخفیف: @(DiscountAmount.ToString("N0")) تومان</p>
                <p>هزینه ارسال: @(ShippingCost.ToString("N0")) تومان</p>
                <hr />
                <p>مبلغ قابل پرداخت: @(PayableAmount.ToString("N0")) تومان</p>
                <button class="btn btn-primary w-100" @onclick="OnCheckout">ادامه به پرداخت</button>
            </div>
        }
        else
        {
            <p class="text-center">سبد خرید شما خالی است.</p>
        }
    </div>
</div>

@code {
    [Parameter]
    public List<OrderItem> CartItems { get; set; } = new List<OrderItem>();

    [Parameter]
    public EventCallback<List<OrderItem>> OnCartUpdated { get; set; }

    [Parameter]
    public decimal ShippingCost { get; set; } = 0m;

    private bool IsCartVisible { get; set; }
    private decimal DiscountRate { get; set; } = 0.1m; // 10% تخفیف پیش‌فرض

    private int TotalItems => CartItems?.Sum(x => x.Quantity) ?? 0;
    private decimal TotalAmount => CartItems?.Sum(x => CalculateItemTotal(x)) ?? 0m;
    private decimal DiscountAmount => TotalAmount * DiscountRate;
    private decimal PayableAmount => TotalAmount - DiscountAmount + ShippingCost;

    private void ToggleCart()
    {
        IsCartVisible = !IsCartVisible;
        StateHasChanged();
    }

    private decimal CalculateItemTotal(OrderItem item)
    {
        var basePrice = item.UnitPrice * item.Quantity;
        var discount = basePrice * item.Discount / 100;
        return basePrice - discount;
    }

    private async Task UpdateQuantity(OrderItem item, int change)
    {
        var currentItem = CartItems.FirstOrDefault(x => x.Id == item.Id);
        if (currentItem != null)
        {
            currentItem.Quantity = Math.Max(1, currentItem.Quantity + change);
            if (OnCartUpdated.HasDelegate)
            {
                await OnCartUpdated.InvokeAsync(CartItems);
            }
        }
    }

    private async Task RemoveItem(Guid id)
    {
        var item = CartItems.FirstOrDefault(x => x.Id == id);
        if (item != null)
        {
            CartItems.Remove(item);
            if (OnCartUpdated.HasDelegate)
            {
                await OnCartUpdated.InvokeAsync(CartItems);
            }
        }
    }

    private async Task OnCheckout()
    {
        if (OnCartUpdated.HasDelegate)
        {
            await OnCartUpdated.InvokeAsync(CartItems);
        }
    }
}

<style>
    .cart-container {
        position: relative;
    }
    .cart-content {
        display: none;
        position: absolute;
        top: 100%;
        right: 0;
        width: 400px;
        background: white;
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        z-index: 1000;
    }
    .cart-content.show {
        display: block;
    }
    .cart-item img {
        max-width: 50px;
    }
    .cart-summary {
        margin-top: 10px;
        padding-top: 10px;
        border-top: 1px solid #eee;
    }
</style>